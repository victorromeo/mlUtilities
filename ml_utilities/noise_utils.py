'''Under GPLv3 adapted from https://github.com/scivision/soothing-sounds/blob/master/soothingsounds/generator.py '''

## Noise
# In general, noise with spectrum S(f) is generated by taking uniform white noise
# and filtering with filter response H(f) to get the desired noise spectrum.
# Color  | Power/octave | Power density/octave
# -------|-------|--------------
# White  | +3 dB | 0 dB
# Pink   |  0 dB | -3 dB
# Blue   | +6 dB | +3 dB
# Brown  | -3 dB | -6 dB
# Violet | +9 dB | +6 dB
# -------|-------|--------------
###

import numpy as np
from numpy.fft import rfft, irfft

mean_square = lambda x: (np.abs(x)**2).mean()
normalise = lambda y, x = 1.0: (y * np.sqrt(mean_square(x) / mean_square(y))).astype(np.float32)

def white(n: int):
    return np.random.randn(n).astype(np.float32)

def pink(n: int):
    r = rfft(white(n)) / n
    s = np.sqrt(np.arange(r.size) + 1.0)
    return normalise(irfft(r/s).real[:n])

def blue(n:int):
    r = rfft(white(n)) / n
    s = np.sqrt(np.arange(r.size))
    return normalise(irfft(r*s).real[:n])

def brown(n:int):
    r = rfft(white(n)) / n
    s = np.arange(r.size) + 1
    return normalise(irfft(r/s).real[:n])

def violet(n: int):
    r = rfft(white(n)) / n
    s = np.arange(r.size)
    return normalise(irfft(r*s).real[0:n])
